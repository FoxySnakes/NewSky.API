// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewSky.API.Data;

#nullable disable

namespace NewSky.API.Migrations
{
    [DbContext(typeof(NewSkyDbContext))]
    [Migration("20240704224942_a")]
    partial class a
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NewSky.API.Models.Db.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AppSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "DiscordUrl",
                            Value = ""
                        },
                        new
                        {
                            Id = 2,
                            Name = "InstagramUrl",
                            Value = ""
                        },
                        new
                        {
                            Id = 3,
                            Name = "YoutubeUrl",
                            Value = ""
                        },
                        new
                        {
                            Id = 4,
                            Name = "TwitterUrl",
                            Value = ""
                        },
                        new
                        {
                            Id = 5,
                            Name = "TikTokUrl",
                            Value = ""
                        },
                        new
                        {
                            Id = 6,
                            Name = "WebStoreIdentifier",
                            Value = "q9p1-a1dc8b36df104edf3ec62d84d3851a78ef5dcf51"
                        },
                        new
                        {
                            Id = 7,
                            Name = "XTebexSecret",
                            Value = "3421979d0b799fe1733ce64ad591b28d3bc86b77"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ServerIp",
                            Value = ""
                        });
                });

            modelBuilder.Entity("NewSky.API.Models.Db.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceHt")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("PriceTtc")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("TebexId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TebexId")
                        .IsUnique();

                    b.ToTable("Package");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Accès au panel admin du site",
                            Name = "access:admin-panel"
                        },
                        new
                        {
                            Id = -2,
                            Description = "Accès à la vue du dashboard sur le panel admin",
                            Name = "access:admin-panel_dashboard"
                        },
                        new
                        {
                            Id = -3,
                            Description = "Accès à la vue des ventes sur le panel admin",
                            Name = "access:admin-panel_sales"
                        },
                        new
                        {
                            Id = -4,
                            Description = "Accès à la vue des utilisateurs sur le panel admin",
                            Name = "access:admin-panel_users"
                        },
                        new
                        {
                            Id = -5,
                            Description = "Accès à la vue des votes sur le panel admin",
                            Name = "access:admin-panel_votes"
                        },
                        new
                        {
                            Id = -6,
                            Description = "Accès à la vue des paramètres généraux",
                            Name = "access:admin-panel_general-settings"
                        },
                        new
                        {
                            Id = -7,
                            Description = "Créer un Rôle",
                            Name = "create:role"
                        },
                        new
                        {
                            Id = -8,
                            Description = "Modifier les rôles et nom d'utilisateur d'un utilisateur",
                            Name = "update:user_informations"
                        },
                        new
                        {
                            Id = -9,
                            Description = "Modifier la sanction de l'utilisateur",
                            Name = "update:user_punishment"
                        },
                        new
                        {
                            Id = -10,
                            Description = "Modifier les paramètres généraux du site",
                            Name = "update:general-settings"
                        },
                        new
                        {
                            Id = -11,
                            Description = "Modifier le rôle d'un utilisateur",
                            Name = "update:user_role"
                        },
                        new
                        {
                            Id = -12,
                            Description = "Modifier un rôle",
                            Name = "update:role"
                        },
                        new
                        {
                            Id = -13,
                            Description = "Supprimer un rôle",
                            Name = "delete:role"
                        },
                        new
                        {
                            Id = -14,
                            Description = "Accès à la vue des rôles sur le panel admin",
                            Name = "access:admin-panel_roles"
                        });
                });

            modelBuilder.Entity("NewSky.API.Models.Db.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Utilisateur authentifié",
                            IsDefault = true,
                            Name = "Joueur"
                        },
                        new
                        {
                            Id = -2,
                            Description = "Responsable du serveur",
                            IsDefault = true,
                            Name = "Fondateur"
                        },
                        new
                        {
                            Id = -3,
                            Description = "Développeur du site",
                            IsDefault = true,
                            Name = "Développeur du site"
                        });
                });

            modelBuilder.Entity("NewSky.API.Models.Db.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasPermission")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = -50,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -1,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -51,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -2,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -52,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -3,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -53,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -4,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -54,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -5,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -55,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -6,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -56,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -7,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -57,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -8,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -58,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -9,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -59,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -10,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -60,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -11,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -61,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -12,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -62,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -13,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -63,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -14,
                            RoleId = -2
                        },
                        new
                        {
                            Id = -100,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -1,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -101,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -2,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -102,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -3,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -103,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -4,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -104,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -5,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -105,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -6,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -106,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -7,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -107,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -8,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -108,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -9,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -109,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -10,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -110,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -11,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -111,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -12,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -112,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -13,
                            RoleId = -3
                        },
                        new
                        {
                            Id = -113,
                            HasPermission = true,
                            IsEditable = false,
                            PermissionId = -14,
                            RoleId = -3
                        });
                });

            modelBuilder.Entity("NewSky.API.Models.Db.TokenInvalid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("TokenInvalid");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BanishmentEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UUID")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.UserNumberVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserNumberVote");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.UserPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId", "PackageId")
                        .IsUnique();

                    b.ToTable("UserPackage");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("RoleId", "UserId")
                        .IsUnique();

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.VoteReward", b =>
                {
                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Reward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Position");

                    b.ToTable("VoteReward");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.RolePermission", b =>
                {
                    b.HasOne("NewSky.API.Models.Db.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewSky.API.Models.Db.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.UserPackage", b =>
                {
                    b.HasOne("NewSky.API.Models.Db.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewSky.API.Models.Db.User", "User")
                        .WithMany("Packages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.UserRole", b =>
                {
                    b.HasOne("NewSky.API.Models.Db.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewSky.API.Models.Db.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("NewSky.API.Models.Db.User", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
